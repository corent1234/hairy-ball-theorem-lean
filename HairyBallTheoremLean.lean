import Mathlib.Topology.MetricSpace.Pseudo.Basic
import Mathlib.Topology.Basic
import Mathlib.Topology.Category.CompHaus.Basic
import Mathlib.Topology.ContinuousMap.Polynomial
import Mathlib.Analysis.InnerProductSpace.Basic
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Analysis.InnerProductSpace.EuclideanDist
import Mathlib.Analysis.Calculus.ContDiff.Defs
import Mathlib.Analysis.Calculus.ContDiff.RCLike
import Mathlib.Analysis.Calculus.Deriv.Polynomial
import Mathlib.Analysis.Calculus.FDeriv.Add
import Mathlib.Analysis.Calculus.InverseFunctionTheorem.FDeriv
import Mathlib.Analysis.NormedSpace.Connected
import Mathlib.Analysis.SpecialFunctions.Pow.Deriv
import Mathlib.MeasureTheory.Measure.Lebesgue.Basic
import Mathlib.MeasureTheory.Integral.Lebesgue
import Mathlib.MeasureTheory.Function.Jacobian
import Mathlib.LinearAlgebra.Dimension.Finrank
-- import Mathlib.Algebra.BigOperators.Group.Finset

set_option autoImplicit false

open scoped RealInnerProductSpace



variable (n : ‚Ñï) (n_pos : 0 < n)

abbrev E := EuclideanSpace ‚Ñù (Fin n)
abbrev unitSphere := Metric.sphere (0 : E n) 1

/- structure ?-/
structure IsExtensionOfVectorFieldOnSn (v : E n ‚Üí E n) where
  isCont : Continuous v
  isTang : ‚àÄ x : E n, ‚ü™x, (v x)‚ü´ = 0
  isExtension : ‚àÄ x : E n, ‚àÄ r > 0, v (r ‚Ä¢ x) = r ‚Ä¢ v x



section

variable (v : E n ‚Üí E n) (hv : IsExtensionOfVectorFieldOnSn n v)
  {vContDiff : ContDiff ‚Ñù 1 v}
  {vUnit : ‚àÄ x : E n, ‚Äñv x‚Äñ = ‚Äñx‚Äñ}
  {A : Set (E n)} (AComp : IsCompact A)

instance instComp : CompactSpace (A : Type) :=
  isCompact_iff_compactSpace.1 AComp

local notation "f" => fun (t : ‚Ñù) (x : E n) ‚Ü¶ x + t ‚Ä¢ (v x)

open Topology

variable {v}

include vContDiff in
lemma continuous_ft (t : ‚Ñù) : Continuous (f t) :=
  continuous_id.add (continuous_const.smul vContDiff.continuous)

include hv in
lemma measurable_ft (t : ‚Ñù) : Measurable (f t) :=
  measurable_id.add (measurable_const.smul hv.isCont.measurable)

lemma vLip' : ‚àÉ c : NNReal, LipschitzWith c (fun x : A => v x) := by
  have : HasCompactSupport (fun x : A => v x) := by
    sorry
  -- apply ContDiff.lipschitzWith_of_hasCompactSupport this _ (le_refl)
  sorry

/- v est lipschitzienne sur A -/
include AComp vContDiff in
lemma vLip : ‚àÉ c, LipschitzOnWith c v A := by
  let ‚ü®r, hr‚ü© := AComp.isBounded.subset_ball 0
  let ‚ü®c, hc‚ü© := (Euclidean.isCompact_closedBall (x := (0 : E n))
    (r := |r|)).exists_bound_of_continuousOn ((vContDiff.continuous_fderiv (le_refl 1)).continuousOn)
  use ‚ü®c, le_trans (norm_nonneg _) (hc 0 (Metric.mem_closedBall_self (abs_nonneg r)))‚ü©
  apply LipschitzOnWith.mono _ ((hr.trans (Metric.ball_subset_ball (le_abs_self r))).trans Metric.ball_subset_closedBall)
  apply (convex_closedBall 0 |r|).lipschitzOnWith_of_nnnorm_fderiv_le (ùïú := ‚Ñù)
    (fun x _ => vContDiff.contDiffAt.differentiableAt (le_refl 1))
  intro x hx
  have : x ‚àà Euclidean.closedBall 0 |r| := by
    simp [Euclidean.closedBall_eq_preimage]
    rw [‚Üê sub_zero x]
    sorry
  rw [Euclidean.closedBall_eq_preimage] at hc
  simp at hc
  sorry

lemma ftx_eq_fty (t : ‚Ñù) {x y : E n} (h : f t x = f t y) :
    x - y = t ‚Ä¢ (v y - v x) := by
  rw [smul_sub, sub_eq_sub_iff_add_eq_add, add_comm _ y]
  exact h

lemma eq_zero_of_le_self {Œ± t : ‚Ñù} (hŒ± : 0 ‚â§ Œ±) (ht : |t| < 1) (h : Œ± ‚â§ |t| * Œ±) :
    Œ± = 0 := by
  by_contra h_contra
  have : 1 ‚â§ |t| := by
    rwa [‚Üê mul_le_mul_right (hŒ±.lt_of_ne (ne_comm.1 h_contra)), one_mul]
  linarith

/- f t est injectif sur A pour t assez petit -/
lemma injOn_A_ft : ‚àÄ·∂† t in ùìù 0, A.InjOn (f t) := by
  /- let ‚ü®c, hc‚ü© := @vLip n v vContDiff A AComp
  rw [eventually_nhds_iff]
  use (Metric.ball 0 c‚Åª¬π)
  simp
  refine ‚ü®fun t ht x hx y hy hxy => ?_, Metric.isOpen_ball, by assumption‚ü©
  apply sub_eq_zero.1
  apply norm_eq_zero.1
  apply eq_zero_of_le_self (t := c * |t|)
  ¬∑ rw [abs_mul, abs_abs, abs_eq_self.2 cpos.le]
    apply (@mul_lt_mul_left _ c‚Åª¬π.toReal (c * |t|) 1 _ _ _ _ _ (inv_pos_of_pos cpos)).1
    rw [‚Üê mul_assoc]
    show (c‚Åª¬π * c).toReal * |t| < c‚Åª¬π * 1
    simp [@inv_mul_cancel_of_invertible _ _ _ (invertibleOfNonzero cpos.ne.symm), ht]
  ¬∑ have : x - y = t ‚Ä¢ v y - t ‚Ä¢ v x := by
      rw [sub_eq_sub_iff_add_eq_add, add_comm _ y]
      exact hxy
    rw [this, ‚Üê smul_sub, norm_smul]
    by_cases ht0 : t = 0
    ¬∑ rw [ht0]
      simp
    ¬∑ -- apply le_trans ((mul_le_mul_left (abs_pos.2 ht0)).2 (hc hy hx))
      sorry -/
  sorry

/- diff√©rentielle de f t en x -/
local notation "f'" =>
  fun (t : ‚Ñù) (x : E n) ‚Ü¶ (ContinuousLinearMap.id ‚Ñù (E n)) + (t ‚Ä¢ (fderiv ‚Ñù v x))
/- noncomputable def f' (t : ‚Ñù) (x : E n) :=
  (ContinuousLinearMap.id ‚Ñù _) + (t ‚Ä¢ (fderiv ‚Ñù v x)) -/

/- f' t x est la diff√©rentielle de f t en x ‚àà A -/
include vContDiff in
lemma ftDeriv (t : ‚Ñù) : ‚àÄ x ‚àà A, HasFDerivWithinAt (f t) (f' t x) A x :=
  fun x _ => ((hasFDerivAt_id x).add
    ((vContDiff.differentiable le_rfl).differentiableAt.hasFDerivAt.const_smul t)).hasFDerivWithinAt

/- f' t x est la diff√©rentielle (stricte) de f t en x -/
include vContDiff in
lemma ftStrictDeriv (t : ‚Ñù) (x : E n) : HasStrictFDerivAt (f t) (f' t x) x :=
  (hasStrictFDerivAt_id x).add
    ((vContDiff.contDiffAt.hasStrictFDerivAt le_rfl).const_smul t)


section vol_poly

local notation "jac_f" =>
  fun (x : E n) ‚Ü¶ LinearMap.toMatrix' (fderiv ‚Ñù v x : E n ‚Üí‚Çó[‚Ñù] E n)

open MeasureTheory

/- A est mesurable -/
include AComp in
lemma meas_A : MeasurableSet A :=
  AComp.isClosed.measurableSet

include AComp vContDiff in
lemma lintegral_abs_det_f't : ‚àÄ·∂† t in ùìù 0,
    ‚à´‚Åª x in A, ENNReal.ofReal |(f' t x).det| ‚àÇvolume = volume ((f t) '' A) := by
  filter_upwards [@injOn_A_ft n v A] with t hinj
  exact lintegral_abs_det_fderiv_eq_addHaar_image volume
    (meas_A n AComp) (@ftDeriv n v vContDiff A t) hinj

include AComp vContDiff hv in
lemma ft_volume_withDensity_abs_det_f't_eq_volume : ‚àÄ·∂† t in ùìù 0,
    Measure.map (f t) ((volume.restrict A).withDensity fun x => ENNReal.ofReal |(f' t x).det|)
    = volume.restrict ((f t) '' A) := by
  filter_upwards [@injOn_A_ft n v A] with t hinj
  exact map_withDensity_abs_det_fderiv_eq_addHaar volume
    (meas_A n AComp) (@ftDeriv n v vContDiff A t) hinj (measurable_ft n hv t)

open Polynomial
open Finset
open Matrix

lemma natDegree_det (M : Matrix (Fin n) (Fin n) ‚Ñù[X]) (h : ‚àÄ i j, (M i j).natDegree ‚â§ 1) :
    M.det.natDegree ‚â§ n := by
  rw [det_apply]
  refine le_trans (natDegree_sum_le _ _) ((fold_max_le n).2 ‚ü®zero_le n, fun œÉ _ => ?_‚ü©)
  show natDegree ((Equiv.Perm.sign œÉ).val ‚Ä¢ univ.prod fun i => M (œÉ i) i) ‚â§ n
  rw [‚Üê @Int.cast_smul_eq_zsmul ‚Ñù ‚Ñù[X] _ _ _ (Equiv.Perm.sign œÉ) (univ.prod fun i => M (œÉ i) i)]
  refine le_trans (natDegree_smul_le (Equiv.Perm.sign œÉ : ‚Ñù) (univ.prod fun i => M (œÉ i) i))
    (le_trans (natDegree_prod_le _ _) (le_trans (sum_le_sum (fun i _ => h (œÉ i) i)) ?_))
  simp

lemma prod_perm_fixpoint (œÉ : Equiv.Perm (Fin n)) :
    univ.prod (fun i => if œÉ i = i then (1 : ‚Ñù) else 0) = if 1 = œÉ then 1 else 0 := by
  by_cases hœÉ : 1 = œÉ
  ¬∑ simp [‚Üê hœÉ]
  ¬∑ have : ¬¨(‚àÄ i, (1 : Equiv.Perm (Fin n)) i = œÉ i) :=
      not_imp_not.2 Equiv.ext hœÉ
    simp at this
    have ‚ü®j, hj‚ü© := this
    rw [prod_eq_zero (Finset.mem_univ j)]
    ¬∑ simp [eq_false hœÉ]
    ¬∑ simp [eq_false (fun (e : œÉ j = j) => hj (by rw [e]))]

lemma sum_perm_sign_smul_prod_fixpoint : univ.sum (fun (œÉ : Equiv.Perm (Fin n)) =>
    Equiv.Perm.sign œÉ ‚Ä¢ univ.prod (fun i => if œÉ i = i then (1 : ‚Ñù) else 0)) = 1 := by
  have : (fun (œÉ : Equiv.Perm (Fin n)) =>
      Equiv.Perm.sign œÉ ‚Ä¢ univ.prod (fun i => if (œÉ i) = i then (1 : ‚Ñù) else 0))
      = (fun œÉ => if 1 = œÉ then 1 else 0) := by
    ext œÉ
    rw [prod_perm_fixpoint n œÉ, apply_ite (fun Œµ => Equiv.Perm.sign œÉ ‚Ä¢ Œµ)]
    by_cases hœÉ : 1 = œÉ
    ¬∑ simp [‚Üê hœÉ]
    ¬∑ simp [eq_false hœÉ]
  rw [this, sum_ite_eq]
  simp

lemma univ_fin_one_singleton : (univ : Finset (Fin 1)) = {0} := rfl

lemma prod_fin_one {Œ± : Type} [CommMonoid Œ±] (g : Fin 1 ‚Üí Œ±) :
    univ.prod g = g 0 := by
  rw [univ_fin_one_singleton, prod_singleton]

lemma coeff_ite (p : Prop) [Decidable p] (P Q : ‚Ñù[X]) (k : ‚Ñï) :
    (if p then P else Q).coeff k = if p then P.coeff k else Q.coeff k :=
  apply_ite (fun q : ‚Ñù[X] => q.coeff k) p P Q

lemma continuous_coeff_C_mul_X {b : E n ‚Üí ‚Ñù} {k : ‚Ñï} (h : Continuous b) :
    Continuous (fun x => (C (b x) * X).coeff k) := by
  by_cases k_one : k = 1
  ¬∑ have : (fun x => (C (b x) * X).coeff k) = b := by
      ext x
      simp [k_one, coeff_C_mul_X]
    rwa [this]
  ¬∑ have : (fun x => (C (b x) * X).coeff k) = 0 := by
      ext x
      rw [coeff_C_mul_X]
      simp [k_one]
    rw [this]
    exact continuous_zero

lemma C_add_C_mul_X_coeff_0 (a : ‚Ñù) (b : ‚Ñù) : (C a + C b * X).coeff 0 = a := by
  simp [coeff_add, coeff_C, coeff_C_mul_X]

lemma C_add_C_mul_X_coeff_1 (a : ‚Ñù) (b : ‚Ñù) : (C a + C b * X).coeff 1 = b := by
  simp [coeff_add, coeff_C, coeff_C_mul_X]

lemma C_add_C_mul_X_coeff_of_one_lt (a : ‚Ñù) (b : ‚Ñù) (k : ‚Ñï) (hk0 : k ‚â† 0) (hk1 : k ‚â† 1) :
    (C a + C b * X).coeff k = 0 := by
  rw [coeff_add, coeff_C, coeff_C_mul_X]
  simp [hk0, hk1]

lemma continuous_coeff_C_add_C_mul_X {a : ‚Ñù} {b : E n ‚Üí ‚Ñù} {k : ‚Ñï} (h : Continuous b) :
    Continuous (fun x => (C a + C (b x) * X).coeff k) := by
  by_cases hk0 : k = 0
  ¬∑ rw [hk0, funext (fun x => C_add_C_mul_X_coeff_0 _ _)]
    exact continuous_const
  ¬∑ by_cases hk1 : k = 1
    ¬∑ rwa [hk1, funext (fun x => C_add_C_mul_X_coeff_1 _ _)]
    ¬∑ rw [funext (fun x => C_add_C_mul_X_coeff_of_one_lt _ _ k hk0 hk1)]
      exact continuous_const

def my_coe (u : E n ‚ÜíL[‚Ñù] E n) : E n ‚Üí E n := u

lemma continuous_my_coe : Continuous (my_coe n) :=
  continuous_pi fun x => (ContinuousLinearMap.apply ‚Ñù (E n) x).continuous

include vContDiff in
lemma continuous_jac_f_apply {i j : Fin n} :
    Continuous (fun x => jac_f x i j) := by
  simp
  exact (continuous_apply_apply _ _).comp
    ((continuous_my_coe n).comp
    (vContDiff.continuous_fderiv (by rfl)))

lemma ofNat'_val (m : ‚Ñï) (hm : 0 < m) (i : Fin m) : @Fin.ofNat' m (NeZero.of_gt hm) i.val = i := by
  apply Fin.eq_of_val_eq
  show i.val % m = i.val
  rw [Nat.mod_eq_of_lt (Fin.prop i)]

lemma univ_Fin_map_val_eq_range (m : ‚Ñï) :
    (univ : Finset (Fin m)).map Fin.valEmbedding = range m := by
  by_cases hm : m = 0
  ¬∑ subst hm
    simp
  ¬∑ ext i
    rw [mem_range, mem_map]
    exact ‚ü®fun ‚ü®j,_,hj‚ü© => by rw [‚Üê hj]; exact (Fin.prop j),
      fun hi => ‚ü®@Fin.ofNat' m (NeZero.mk hm) i, mem_univ _, Nat.mod_eq_of_lt hi‚ü©‚ü©

lemma prod_univ_Fin_eq_prod_range {Œ± : Type} [CommMonoid Œ±] (m : ‚Ñï) (g : ‚Ñï ‚Üí Œ±) :
    (univ : Finset (Fin m)).prod (fun i => g i.val) = (range m).prod g := by
  rw [‚Üê univ_Fin_map_val_eq_range, prod_map]
  rfl

include n_pos in
lemma continuous_coeff_prod (m : ‚Ñï) (hm : 0 < m) (hmn : m ‚â§ n) (k : ‚Ñï)
    (P : Fin n ‚Üí E n ‚Üí ‚Ñù[X]) (hP : ‚àÄ i k', Continuous (fun x => (P i x).coeff k')) :
    Continuous fun x => ((univ : Finset (Fin m)).prod (fun i => P (@Fin.ofNat' n (NeZero.of_gt n_pos) i) x)).coeff k := by
  have : (fun x => ((univ : Finset (Fin m)).prod (fun i => P (@Fin.ofNat' n (NeZero.of_gt n_pos) i) x)).coeff k)
      = (fun x => ((range m).prod (fun i => P (@Fin.ofNat' n (NeZero.of_gt n_pos) i) x)).coeff k) := by
    ext x
    rw [‚Üê prod_univ_Fin_eq_prod_range]
  rw [this]
  induction' m with m ih generalizing k
  ¬∑ simp [coeff_one, continuous_const]
  ¬∑ have : (fun x => (‚àè i ‚àà range (m + 1), P (@Fin.ofNat' n (NeZero.of_gt n_pos) i) x).coeff k)
        = (fun x => ‚àë Œº ‚àà antidiagonal k, (P (@Fin.ofNat' n (NeZero.of_gt n_pos) m) x).coeff Œº.1
        * (‚àè i ‚àà range m, P (@Fin.ofNat' n (NeZero.of_gt n_pos) i) x).coeff Œº.2) := by
      ext x
      rw [range_succ, prod_insert not_mem_range_self, coeff_mul]
    rw [this]
    refine continuous_finset_sum _ (fun Œº _ => (hP _ _).mul ?_)
    by_cases mz : m = 0
    ¬∑ have : (fun x => ((range m).prod fun i => P (@Fin.ofNat' n (NeZero.of_gt n_pos) i) x).coeff Œº.2)
          = (fun x => if Œº.2 = 0 then 1 else 0) := by
        ext x
        simp [mz, coeff_one]
      rw [this]
      exact continuous_const
    ¬∑ exact ih (pos_iff_ne_zero.2 mz) (lt_of_lt_of_le (Nat.lt_succ_self m) hmn).le
        Œº.2 (by ext x; rw [‚Üê prod_univ_Fin_eq_prod_range])

include n_pos in
lemma continuous_coeff_prod' (k : ‚Ñï) (P : Fin n ‚Üí E n ‚Üí ‚Ñù[X])
    (hP : ‚àÄ i k', Continuous (fun x => (P i x).coeff k')) :
    Continuous fun x => ((univ : Finset (Fin n)).prod (fun i => P i x)).coeff k := by
  have : (fun x => (univ.prod (fun i => P i x)).coeff k)
      = (fun x => ((univ : Finset (Fin n)).prod
      (fun i => P (@Fin.ofNat' n (NeZero.of_gt n_pos) i) x)).coeff k) :=
    (funext fun x => congrArg (fun p => coeff p k)
      (congrArg _ (funext fun i => (congrArg (fun j => P j x) (by rw [ofNat'_val _ n_pos])))))
  rw [this]
  exact continuous_coeff_prod _ n_pos _ n_pos le_rfl _ _ hP

/- det (f' t x) est polynomial en t et les coefficients sont continus en x -/
include n_pos vContDiff in
lemma f't_det_poly : ‚àÉ P : E n ‚Üí Polynomial ‚Ñù,
    (‚àÄ x : E n, (P x).natDegree ‚â§ n)
    ‚àß (‚àÄ x : E n, (P x).coeff 0 = 1)
    ‚àß (‚àÄ t : ‚Ñù, ‚àÄ x : E n, (f' t x).det = (P x).eval t)
    ‚àß (‚àÄ k : ‚Ñï, Continuous fun x => (P x).coeff k) := by
  let P := (fun x =>
    (of (fun i j => (if i = j then 1 else 0) + C (jac_f x i j) * X)).det)
  use P
  constructor
  ¬∑ refine fun x => natDegree_det _ _ (fun i j => ?_)
    rw [of_apply]
    apply le_trans (natDegree_add_le _ _)
    rw [apply_ite natDegree, natDegree_one, natDegree_zero, ite_id, Nat.zero_max]
    apply le_trans natDegree_mul_le
    simp
  ¬∑ constructor
    ¬∑ intro x
      dsimp [P]
      rw [det_apply, finset_sum_coeff, ‚Üê sum_perm_sign_smul_prod_fixpoint]
      apply congrArg
      ext œÉ
      rw [coeff_smul, coeff_zero_prod]
      apply congrArg (fun Œ± => _ ‚Ä¢ univ.prod Œ±)
      ext i
      simp [apply_ite (fun p => coeff p 0)]
    ¬∑ constructor
      ¬∑ intro t x
        show LinearMap.det (f' t x : E n ‚Üí‚Çó[‚Ñù] E n) = eval t (P x)
        have useless : LinearMap.det (f' t x : E n ‚Üí‚Çó[‚Ñù] E n) =
            (LinearMap.toMatrix' (LinearMap.id + t ‚Ä¢ (fderiv ‚Ñù v x : E n ‚Üí‚Çó[‚Ñù] E n))).det := by
          rw [LinearMap.det_toMatrix']
          rfl
        rw [useless]
        simp
        rw [LinearMap.toMatrix'_id]
        have : 1 + t ‚Ä¢ jac_f x = (of (fun i j => ((if i = j then 1 else 0)
            + C (jac_f x i j) * X))).map (eval t) := by
          ext i j
          simp
          rw [one_apply, mul_comm, apply_ite (eval t)]
          simp
        rw [this, ‚Üê coe_evalRingHom, ‚Üê RingHom.mapMatrix_apply (evalRingHom t), ‚Üê RingHom.map_det]
      ¬∑ intro k
        have P_coeff : (fun x => (P x).coeff k)
            = (fun x => univ.sum (fun œÉ => Equiv.Perm.sign œÉ
            ‚Ä¢ (univ.prod (fun i => of (fun i j => (if i = j then 1 else 0)
            + C (jac_f x i j) * X) (œÉ i) i)).coeff k)) := by
          ext x
          dsimp [P]
          rw [det_apply, finset_sum_coeff]
          apply congrArg
          ext œÉ
          simp [coeff_smul]
        rw [P_coeff]
        refine continuous_finset_sum _ (fun œÉ _ => Continuous.const_smul
          (continuous_coeff_prod' _ n_pos _ _ (fun i k' => ?_)) _)
        have : (fun x => (of (fun i j => (if i = j then 1 else 0)
            + C (jac_f x i j) * X) (œÉ i) i).coeff k')
            = (fun x => if k' = 0 then (if œÉ i = i then 1 else 0)
            else (if k' = 1 then jac_f x (œÉ i) i else 0)) := by
          ext x
          rw [of_apply, ‚Üê C_1, ‚Üê C_0, ‚Üê apply_ite C]
          by_cases hk'0 : k' = 0
          ¬∑ rw [hk'0, C_add_C_mul_X_coeff_0]
            simp
          ¬∑ by_cases hk'1 : k' = 1
            ¬∑ rw [hk'1, C_add_C_mul_X_coeff_1]
              simp
            ¬∑ rw [C_add_C_mul_X_coeff_of_one_lt _ _ k' hk'0 hk'1]
              simp [hk'0, hk'1]
        rw [this]
        exact continuous_if_const _ (fun _ => continuous_const)
            (fun _ => continuous_if_const _
            (fun _ => (@continuous_jac_f_apply n v vContDiff _ _))
            (fun _ => continuous_const))

lemma zero_lt_continuous (g : ‚Ñù ‚Üí ‚Ñù) (hg : Continuous g) (h0 : g 0 = 1) : ‚àÄ·∂† t in ùìù 0, 0 < g t :=
  eventually_gt_of_tendsto_gt (by linarith) (hg.tendsto' _ _ rfl)

/- si P 0 = 1 alors P t > 0 pour t assez petit -/
lemma zero_lt_poly (P : Polynomial ‚Ñù) (h0 : P.coeff 0 = 1) : ‚àÄ·∂† t in ùìù 0, 0 < P.eval t := by
  apply zero_lt_continuous P.toContinuousMap P.toContinuousMap.continuous
  simpa [‚Üê P.coeff_zero_eq_eval_zero]

lemma continuous_bound (M : ‚Ñù) :
    Continuous (fun t => 1 - M * (range n).sum fun k => |t| ^ (k + 1)) :=
  continuous_const.sub ((continuous_mul_left M).comp
    (continuous_finset_sum _ (fun _ _ => (continuous_pow _).comp continuous_abs)))

lemma pos_bound (M : ‚Ñù) : ‚àÄ·∂† t in ùìù 0,
    0 < 1 - M * (range n).sum fun k => |t| ^ (k + 1) := by
  apply zero_lt_continuous _ (continuous_bound n M)
  simp

lemma range_bounded (Œπ : ‚Ñï ‚Üí ‚Ñù) (m : ‚Ñï) (hm : m > 0) (hŒπ : Œπ 0 > 0) :
    ‚àÉ M > 0, ‚àÄ k ‚àà range m, Œπ k ‚â§ M :=
  ‚ü®((range m).image Œπ).max' ((nonempty_range_iff.2 (by linarith)).image Œπ),
    by linarith [((range m).image Œπ).le_max' (Œπ 0) (mem_image_of_mem Œπ (mem_range.2 (by linarith)))],
    fun _ hk => le_max' _ _ (mem_image_of_mem Œπ hk)‚ü©

lemma unif_bounded_range_of_bounded {Œ± : Type} (Œπ : ‚Ñï ‚Üí Œ± ‚Üí ‚Ñù) (h : ‚àÄ k, ‚àÉ M, ‚àÄ x, |Œπ k x| ‚â§ M) (m : ‚Ñï) :
    ‚àÉ M, ‚àÄ k ‚àà range m, ‚àÄ x, |Œπ k x| ‚â§ M := by
  induction' m with m hm
  ¬∑ simp
  ¬∑ let ‚ü®M‚ÇÄ, hM‚ÇÄ‚ü© := hm
    let ‚ü®M, hM‚ü© := h m
    use max M M‚ÇÄ
    simp
    intro k k_le_m x
    by_cases hk : k = m
    ¬∑ rw [hk]
      exact Or.inl (hM x)
    ¬∑ exact Or.inr (hM‚ÇÄ k (mem_range.2 (lt_of_le_of_ne (Nat.le_of_lt_succ k_le_m) hk)) x)

lemma useless_lemma (g : ‚Ñï ‚Üí ‚Ñù) (n : ‚Ñï) :
    (range (n + 1)).sum g = (range (1 + n)).sum g := by
  rw [add_comm]

include AComp in
lemma bound_poly (P : E n ‚Üí Polynomial ‚Ñù) (hdeg : ‚àÄ x, (P x).natDegree ‚â§ n)
    (h0 : ‚àÄ x, (P x).coeff 0 = 1) (hcont : ‚àÄ k, Continuous (fun x => (P x).coeff k)) :
    ‚àÉ M, ‚àÄ t : ‚Ñù, ‚àÄ x : A,
    1 - M * ((range n).sum fun k => |t| ^ (k + 1)) ‚â§ (P x).eval t := by
  let continuous_coeff (k : ‚Ñï) : C(A,‚Ñù) := ContinuousMap.restrict A ‚ü®_, hcont k‚ü©
  let bounded_continuous_coeff (k : ‚Ñï) := @BoundedContinuousFunction.mkOfCompact A ‚Ñù _ _ (instComp n AComp) (continuous_coeff k)
  have : ‚àÄ k, ‚àÉ M, ‚àÄ x : A, |(P x).coeff k| ‚â§ M :=
    fun k => ‚ü®‚Äñbounded_continuous_coeff k‚Äñ, fun x => ((bounded_continuous_coeff k).norm_coe_le_norm x)‚ü©
  let ‚ü®M, hM‚ü© := unif_bounded_range_of_bounded (fun k (x : A) => (P x).coeff k) this (m := n + 1)
  have : ‚àÄ t, ‚àÄ x : A, ‚àÄ k ‚àà range n, - M * |t| ^ (k + 1) ‚â§ ((P x).coeff (1 + k)) * t ^ (1 + k) := by
    refine fun t x k hk => le_trans ?_ (neg_abs_le _)
    simp [abs_mul, abs_pow, add_comm]
    by_cases h‚ÇÄ : t = 0
    ¬∑ simp [h‚ÇÄ]
    ¬∑ exact (mul_le_mul_right (pow_pos (abs_pos.2 h‚ÇÄ) _)).2 (hM (k + 1) (mem_range_succ_iff.2 (by linarith [mem_range.1 hk])) x)
  use M
  intro t x
  rw [(P x).eval_eq_sum_range' (lt_of_le_of_lt (hdeg x) (lt_add_one n)),
    useless_lemma, sum_range_add, sum_range_one, h0 x,
    pow_zero, mul_one, sub_eq_neg_add, ‚Üêneg_mul, mul_sum, add_comm]
  exact add_le_add_left (sum_le_sum (this t x)) _

/- det (f' t x) > 0 pour t assez petit -/
include n_pos vContDiff AComp in
lemma zero_lt_det_f't : ‚àÄ·∂† t in ùìù 0, ‚àÄ x : A, 0 < (f' t x).det := by
  have ‚ü®P, hP‚ü© := @f't_det_poly n n_pos v vContDiff
  have ‚ü®M, hM‚ü© := bound_poly n AComp P hP.1 hP.2.1 hP.2.2.2
  filter_upwards [pos_bound n M] with t ht x
  rw [hP.2.2.1 t x]
  exact lt_of_lt_of_le ht (hM t x)

/- |det (f' t x)| est polynomial en t et les coefficients sont continus en x -/
include n_pos vContDiff AComp in
lemma abs_det_f't_poly : ‚àÉ P : E n ‚Üí Polynomial ‚Ñù,
    (‚àÄ x : E n, (P x).natDegree ‚â§ n)
    ‚àß (‚àÄ·∂† t in ùìù 0, ‚àÄ x : A, |(f' t x).det| = (P x).eval t)
    ‚àß (‚àÄ k : ‚Ñï, Continuous fun x => (P x).coeff k) := by
  have ‚ü®P, hP‚ü© := @f't_det_poly n n_pos v vContDiff
  refine ‚ü®P, hP.1, ?_, hP.2.2.2‚ü©
  filter_upwards [@zero_lt_det_f't n n_pos v vContDiff A AComp] with t hpos x
  rw [abs_of_pos (hpos x), hP.2.2.1 t]

include vContDiff in
lemma cont_abs_det_f't (t : ‚Ñù) : Continuous (fun x => |(f' t x).det|) :=
  continuous_abs.comp (ContinuousLinearMap.continuous_det.comp (continuous_const.add
    (continuous_const.smul (vContDiff.continuous_fderiv (by rfl)))))

lemma nonneg_ae_abs_det_f't (t : ‚Ñù) : 0 ‚â§·µê[volume.restrict A] fun x => |(f' t x).det| := by
  filter_upwards
  simp

/- le volume de (f t)''(A) est polynomial en t -/
include n_pos vContDiff AComp in
lemma vol_ft_A_poly : ‚àÉ P : Polynomial ‚Ñù, ‚àÄ·∂† t in ùìù 0,
    (volume ((f t) '' A)).toReal = (P.eval t) := by
  let ‚ü®P, hP‚ü© := @abs_det_f't_poly n n_pos v vContDiff A AComp
  use (range (n + 1)).sum (fun i => C (‚à´ x in A, (P x).coeff i ‚àÇvolume) * X ^ i)
  filter_upwards [@lintegral_abs_det_f't n v vContDiff A AComp, hP.2.1] with t hInt hP1
  simp [‚Üê hInt, eval_finset_sum,
    ‚Üê integral_eq_lintegral_of_nonneg_ae (nonneg_ae_abs_det_f't n t) (@cont_abs_det_f't n v vContDiff t).aestronglyMeasurable]
  have : A.EqOn (fun x => |(f' t x).det|) (fun x => (range (n + 1)).sum (fun n => (P x).coeff n * t ^ n)) := by
    intro x xA
    simp [hP1 ‚ü®x, xA‚ü©]
    nth_rw 1 [(P x).as_sum_range' (n + 1) (Nat.lt_succ_of_le (hP.1 x))]
    simp [eval_finset_sum]
  have integrable_coeff (i : ‚Ñï) : Integrable (fun x => (P x).coeff i * t ^ i) (volume.restrict A) :=
    ContinuousOn.integrableOn_compact AComp (Continuous.continuousOn ((hP.2.2 i).smul continuous_const))
  rw [setIntegral_congr (meas_A n AComp) this, integral_finset_sum _ (fun i _ => integrable_coeff i)]
  have : (fun i => ‚à´ x in A, (P x).coeff i * t ^ i) = (fun i => (‚à´ x in A, (P x).coeff i) * t ^ i) := by
    ext i
    show ‚à´ x in A, (P x).coeff i ‚Ä¢ t ^ i = (‚à´ x in A, (P x).coeff i) ‚Ä¢ t ^ i
    rw [integral_smul_const]
  rw [this]

end vol_poly


open Set

/- LinearMap.equivOfDetNeZero, toContinuousLinearEquiv -/
/- f' t est une equivalence lin√©aire si t est assez petit -/
-- @[simps!?]
/- noncomputable def f't_equiv : ‚àÄ·∂† t in ùìù 0, E n ‚âÉL[‚Ñù] E n :=
  -- LinearEquiv.toContinuousLinearEquiv (LinearMap.equivOfDDetNeZero (f' t x) )
  sorry -/

include hv in
lemma inner_self_v_eq_zero_of_norm_one (t : ‚Ñù) (x : E n) :
    ‚ü™x, t ‚Ä¢ v x‚ü´ = 0 := by
  rw [inner_smul_right, hv.isTang x, mul_zero]

include hv vUnit in
lemma ft_mem_sphere_of_mem_sphere (t : ‚Ñù) (x : unitSphere n) :
    f t x ‚àà Metric.sphere 0 (Real.sqrt (1 + t*t)) := by
  rw [mem_sphere_iff_norm, sub_zero, ‚Üê Real.sqrt_mul_self (norm_nonneg _),
    norm_add_sq_eq_norm_sq_add_norm_sq_real
    (inner_self_v_eq_zero_of_norm_one n hv t x)]
  simp [mem_sphere_zero_iff_norm.1 (Subtype.mem x), norm_smul, vUnit x]

include hv vUnit in
lemma image_ft_subset_sphere (t : ‚Ñù) :
    (f t) '' (unitSphere n) ‚äÜ Metric.sphere 0 (Real.sqrt (1 + t*t)) :=
  fun y ‚ü®x, hx, hxy‚ü© => by
    rw [‚Üê hxy]
    exact @ft_mem_sphere_of_mem_sphere _ _ hv vUnit t ‚ü®x, hx‚ü©

include hv vUnit in
lemma ft_mapsTo_sphere (t : ‚Ñù) : MapsTo (f t) (unitSphere n)
    (Metric.sphere 0 (Real.sqrt (1 + t * t))) :=
  fun x hx => @ft_mem_sphere_of_mem_sphere n _ hv vUnit t ‚ü®x, hx‚ü©

variable (hn : 1 < n) (vContDiff) (vUnit)

include hn in
lemma one_lt_rank_EuclideanSpace : 1 < Module.rank ‚Ñù (E n) := by
  apply Module.lt_rank_of_lt_finrank
  rw [finrank_euclideanSpace, Fintype.card_fin]
  exact hn

local notation "f_restr" =>
  fun (t : ‚Ñù) ‚Ü¶ restrictPreimage (Metric.sphere 0 (Real.sqrt (1 + t * t))) (f t)

include vContDiff in
lemma continuous_ft_restr (t : ‚Ñù) : Continuous (f_restr t) :=
  (@continuous_ft n _ vContDiff t).restrict _

include hv vUnit in
lemma ft_preimage_sphere (t : ‚Ñù) :
    (f t) ‚Åª¬π' (Metric.sphere 0 (Real.sqrt (1 + t * t))) = unitSphere n := by
  ext x
  rw [mem_preimage, mem_sphere_iff_norm, sub_zero,
    ‚Üê (sq_eq_sq (norm_nonneg _) (Real.sqrt_nonneg _)),
    Real.sq_sqrt (add_nonneg (zero_le_one) (mul_self_nonneg _)),
    norm_add_sq_real, mem_sphere_zero_iff_norm, norm_smul, inner_smul_right,
    vUnit, hv.isTang, ‚Üê abs_mul_abs_self, Real.norm_eq_abs, ‚Üê mul_one (1 + _)]
  simp only [mul_zero, add_zero]
  have : ‚Äñx‚Äñ ^ 2 + (|t| * ‚Äñx‚Äñ) ^ 2 = (1 + |t| * |t|) * ‚Äñx‚Äñ ^ 2 := by ring
  rw [this, mul_eq_mul_left_iff, sq_eq_one_iff]
  simp only [(add_pos_of_pos_of_nonneg (zero_lt_one) (mul_self_nonneg |t|)).ne.symm,
    (lt_of_lt_of_le neg_one_lt_zero (norm_nonneg _)).ne.symm]
  simp

instance instCompactPreimageSphere (t : ‚Ñù) :
    CompactSpace ((f t) ‚Åª¬π' (Metric.sphere 0 (Real.sqrt (1 + t * t)))) := by
  rw [ft_preimage_sphere n hv vUnit]
  exact Metric.sphere.compactSpace _ _

/- lemma ft_restr_strictFDeriv (t : ‚Ñù) (x : Metric.ball (0 : E n) 2) :
    HasStrictFDerivAt (restrict (Metric.ball 0 2) (f t)) (f' t x) x := by
  sorry -/

/- lemma ft_restr_eq_restrictPreimage_restrict (t : ‚Ñù) :
    f_restr t = restrictPreimage (Metric.sphere 0 (Real.sqrt (1 + t * t))) (f t) := by
  sorry -/

lemma preimage_restrict {Œ± Œ≤ : Type} (s : Set Œ±) (g : Œ± ‚Üí Œ≤) (t : Set Œ≤) :
    (restrict s g) ‚Åª¬π' t = s ‚à© (g ‚Åª¬π' t) := by
  rw [restrict_eq, preimage_comp]
  exact eq_of_subset_of_subset (subset_inter (Subtype.coe_image_subset _ _)
    (image_preimage_subset _ _))
    (fun x hx => ‚ü®‚ü®x, hx.1‚ü©, ‚ü®mem_preimage.2 hx.2, rfl‚ü©‚ü©)

include n_pos vContDiff in
lemma isOpenMap_ft : ‚àÄ·∂† t in ùìù 0, IsOpenMap (restrict (Metric.ball 0 2) (f t)) := by
  filter_upwards [@zero_lt_det_f't n n_pos _ vContDiff _
    (ProperSpace.isCompact_closedBall 0 2)] with t ht
  refine isOpenMap_iff_nhds_le.2 (fun ‚ü®x, hx‚ü© => ?_)
  rw [restrict_apply, restrict_eq, ‚Üê Filter.map_map,
    ‚Üê @HasStrictFDerivAt.map_nhds_eq_of_equiv ‚Ñù _ _ _ _ _ _ _ _
    ((f' t x).equivOfDetNeZero (ht ‚ü®x, mem_closedBall_zero_iff.2
    (le_of_lt (mem_ball_zero_iff.1 hx))‚ü©).ne.symm).toContinuousLinearEquiv _ _
    (@ftStrictDeriv n _ vContDiff t x)]
  have : Filter.map Subtype.val (ùìù (‚ü®x, hx‚ü© : Metric.ball (0 : E n) 2)) = ùìù x :=
    eq_of_le_of_le continuous_subtype_val.continuousAt.tendsto
      (isOpenMap_iff_nhds_le.1 Metric.isOpen_ball.isOpenMap_subtype_val ‚ü®x, hx‚ü©)
  rw [this]

include hv vUnit in
lemma subtype_val_preimage_ball_eq_sphere (t : ‚Ñù) :
    (univ : Set ((f t) ‚Åª¬π' (Metric.sphere 0 (Real.sqrt (1 + t * t)))))
    = (Subtype.val ‚Åª¬π' (Metric.ball (0 : E n) 2)) := by
  apply eq_preimage_subtype_val_iff.2
  rw [ft_preimage_sphere n hv vUnit]
  exact fun x hx =>
    ‚ü®fun _ => mem_ball_zero_iff.2 (by rw [mem_sphere_zero_iff_norm.1 hx]; linarith),
    fun _ => mem_univ _‚ü©

include n_pos hv vContDiff vUnit in
/- f t : unitSphere n ‚Üí Metric.sphere 0 (sqrt (1 + t*t)) est ouverte pour t assez petit -/
lemma isOpenMap_ft_restr : ‚àÄ·∂† t in ùìù 0, IsOpenMap (f_restr t) := by
  filter_upwards [@isOpenMap_ft n n_pos v vContDiff] with t ht
  intro U ‚ü®V, hV, hUV‚ü©
  have : U = Subtype.val ‚Åª¬π' (V ‚à© Metric.ball 0 2) := by
    rw [preimage_inter, hUV, ‚Üê subtype_val_preimage_ball_eq_sphere n hv vUnit, inter_univ]
  rw [this, image_restrictPreimage, ‚Üê image_restrict]
  exact continuous_subtype_val.isOpen_preimage _
    (ht _ (continuous_subtype_val.isOpen_preimage _ hV))

include hn in
lemma isConnected_sphere_E (t : ‚Ñù) : IsConnected (Metric.sphere (0 : E n) (Real.sqrt (1 + t*t))) :=
  isConnected_sphere (one_lt_rank_EuclideanSpace n hn) 0 (Real.sqrt_nonneg (1 + t*t))

include hv vUnit in
lemma image_ft_eq_image_ft_restr (t : ‚Ñù) :
    (f t) '' (unitSphere n) = range (f_restr t) := by
  ext y
  refine ‚ü®fun ‚ü®x, hx, hxy‚ü© => (mem_image _ _ _).2 ?_,
    fun ‚ü®y', ‚ü®x, hxy'‚ü©, hyy'‚ü© => (mem_image _ _ _).2
    ‚ü®x, ‚ü®by simp [‚Üê ft_preimage_sphere n hv vUnit t, Subtype.mem x],
    by simp [‚Üê hyy', ‚Üê hxy']‚ü©‚ü©‚ü©
  have y_mem_sphere : y ‚àà Metric.sphere 0 (Real.sqrt (1 + t * t)) := by
    rw [‚Üê hxy]
    exact @ft_mem_sphere_of_mem_sphere _ _ hv vUnit t ‚ü®x, hx‚ü©
  use ‚ü®y, y_mem_sphere‚ü©
  exact ‚ü®mem_range.2 ‚ü®‚ü®x, by rwa [mem_preimage, hxy]‚ü©,
    Subtype.val_injective (by simp [hxy])‚ü©, by simp‚ü©

include n_pos hv vContDiff vUnit in
lemma isOpen_image_ft_restr : ‚àÄ·∂† t in ùìù 0, IsOpen (range (f_restr t)) := by
  filter_upwards [isOpenMap_ft_restr n n_pos hv vContDiff vUnit] with t ht
  exact ht.isOpen_range

include vContDiff in
lemma isClosed_image_ft (t : ‚Ñù) : IsClosed ((f t) '' (unitSphere n)) :=
  ((isCompact_sphere _ _).image (@continuous_ft n v vContDiff t)).isClosed

include hv vContDiff vUnit in
lemma isClosed_image_ft_restr (t : ‚Ñù) : IsClosed (range (f_restr t)) :=
  (@isCompact_range _ _ _ _ (instCompactPreimageSphere n hv vUnit t) _
  (continuous_ft_restr n vContDiff t)).isClosed

instance instNontrivialE : Nontrivial (E n) := by
  sorry

lemma image_preimage_eq_self {Œ± : Type} (s : Set Œ±) :
    Subtype.val '' (Subtype.val ‚Åª¬π' s : Set s) = s := by
  rw [Subtype.image_preimage_coe, inter_self]

lemma useless_lemma2 {Œ± : Type} {s s' t : Set Œ±} (h : s = s') (h' : s ‚äÜ t) : s' ‚äÜ t := by
  rwa [‚Üê h]

include n_pos hn hv vContDiff vUnit in
lemma image_ft_eq_sphere : ‚àÄ·∂† t in ùìù 0,
    (f t) '' (unitSphere n) = Metric.sphere 0 (Real.sqrt (1 + t*t)) := by
  filter_upwards [isOpen_image_ft_restr n n_pos hv vContDiff vUnit] with t ht
  apply eq_of_subset_of_subset (@image_ft_subset_sphere _ _ hv vUnit t)
  rw [@image_ft_eq_image_ft_restr _ _ hv vUnit]
  apply useless_lemma2 (image_preimage_eq_self _)
  apply (image_subset_image_iff Subtype.val_injective).2
  rw [Subtype.coe_preimage_self]
  refine (Subtype.connectedSpace
    (isConnected_sphere_E n hn t)).isPreconnected_univ.subset_isClopen
    ‚ü®isClosed_image_ft_restr _ hv vContDiff vUnit t, ht‚ü© ?_
  rw [univ_inter]
  apply Nonempty.of_image
  rw [‚Üê @image_ft_eq_image_ft_restr _ _ hv vUnit]
  apply (NormedSpace.sphere_nonempty.2 (zero_le_one)).image

variable (odd_n : Odd n)

open Polynomial

lemma one_add_sq_natDegree : (1 + X * X : Polynomial ‚Ñù).natDegree = 2 := by
  rw [‚Üê C_1, natDegree_C_add, natDegree_mul X_ne_zero X_ne_zero, natDegree_X]

lemma C_mul_X_add_C_mul_self (a b : ‚Ñù) : (C a * X + C b) * (C a * X + C b)
    = C (a * a) * X * X + C (2 * a * b) * X + C (b * b) := by
  simp only [map_mul, map_ofNat]
  ring

lemma not_sqrt_one_add_sq_eq_poly :
    ¬¨ (‚àÉ P : Polynomial ‚Ñù, ‚àÄ t, Real.sqrt (1 + t * t) = P.eval t) := by
  intro ‚ü®P, hP‚ü©
  have eq_P_sq : 1 + X * X = P * P := by
    refine Polynomial.funext (fun t => ?_)
    rw [eval_mul, ‚Üê hP t, Real.mul_self_sqrt (add_nonneg (zero_le_one) (mul_self_nonneg _))]
    simp
  have P_ne_zero : P ‚â† 0 :=
    fun h => two_ne_zero (by simp [‚Üê one_add_sq_natDegree, eq_P_sq, h])
  have P_natDegree_eq_one : P.natDegree = 1 := by
    apply mul_left_cancel‚ÇÄ two_ne_zero
    rw [two_mul, ‚Üê natDegree_mul P_ne_zero P_ne_zero, ‚Üê eq_P_sq, one_add_sq_natDegree]
  let ‚ü®a, b, hab‚ü© := (exists_eq_X_add_C_of_natDegree_le_one (by rw [P_natDegree_eq_one]) :
    ‚àÉ a b, P = C a * X + C b)
  rw [hab, C_mul_X_add_C_mul_self] at eq_P_sq
  have h0 : coeff (1 + X * X) 0
      = coeff (C (a * a) * X * X + C (2 * a * b) * X + C (b * b)) 0 := by
    rw [eq_P_sq]
  have h1 : coeff (1 + X * X) 1
      = coeff (C (a * a) * X * X + C (2 * a * b) * X + C (b * b)) 1 := by
    rw [eq_P_sq]
  simp at h0
  simp at h1
  rw [‚Üê C_1, coeff_C_ne_zero (one_ne_zero)] at h1
  have a0 : a = 0 :=
    mul_left_cancel‚ÇÄ two_ne_zero ((mul_right_cancel‚ÇÄ
      (left_ne_zero_of_mul (ne_zero_of_eq_one h0.symm))) (by simp [‚Üê h1]))
  rw [hab, a0, C_0, zero_mul, zero_add, natDegree_C] at P_natDegree_eq_one
  exact zero_ne_one P_natDegree_eq_one

include odd_n in
lemma not_one_add_sq_pow_n_div_two_eq_poly :
    ¬¨ (‚àÉ P : Polynomial ‚Ñù, ‚àÄ t, (1 + t * t) ^ (n / 2 : ‚Ñù) = P.eval t) := by
  let ‚ü®m, hm‚ü© := odd_n
  rw [hm]
  clear hm
  induction' m with m ih <;> intro ‚ü®P, hP‚ü©
  ¬∑ simp only [Nat.zero_eq, mul_zero, zero_add, Nat.cast_one, ‚Üê Real.sqrt_eq_rpow] at hP
    exact not_sqrt_one_add_sq_eq_poly ‚ü®P, hP‚ü©
  ¬∑ have : ‚àÄ t : ‚Ñù, (2 * m + 3) * t * (1 + t * t) ^ ((2 * m + 1) / 2 : ‚Ñù)
        = eval t (derivative P) := by
      intro t
      rw [‚Üê Polynomial.deriv, ‚Üê _root_.funext hP, deriv_rpow_const
        ((differentiableAt_id'.mul differentiableAt_id').const_add 1)
        (Or.inl (lt_add_of_pos_of_le zero_lt_one (mul_self_nonneg t)).ne.symm),
        deriv_const_add, deriv_mul differentiableAt_id differentiableAt_id,
        deriv_id'', Nat.cast_add, Nat.cast_mul, Nat.cast_succ]
      ring_nf
    have derivative_coeff_zero : (derivative P).coeff 0 = 0 := by
      simp [coeff_zero_eq_eval_zero, ‚Üê this]
    have X_mul_divX_derivative : derivative P = X * divX (derivative P) := by
      rw [‚Üê add_zero (_ * _), ‚Üê C_0, ‚Üê derivative_coeff_zero, X_mul_divX_add]
    rw [X_mul_divX_derivative] at this
    apply ih
    use C (1 / (2 * m + 3) : ‚Ñù) * divX (derivative P)
    intro t
    rw [eval_mul, eval_C]
    sorry

theorem HairyBallDiff : ‚àÉ x, v x = 0 := by
  use 0
  rw [‚Üê norm_eq_zero]
  rw [vUnit, norm_zero]

end



section

variable (v : E n ‚Üí E n) (hv : IsExtensionOfVectorFieldOnSn n v) (odd_n : Odd n)

theorem HairyBallTheorem : ‚àÉ x, v x = 0 := by
  sorry

end
